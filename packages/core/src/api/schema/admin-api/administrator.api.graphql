type Query {
    administrator(id: ID!): Administrator
    administrators(options: AdministratorListOptions): AdministratorList
    activeAdministrator: Administrator
}

type Mutation {
    "创建一个超级管理员"
    createAdministrator(input: CreateAdministratorInput!): Administrator!
    "Update an existing Administrator"
    updateAdministrator(input: UpdateAdministratorInput!): Administrator!
    "Update the active (currently logged-in) Administrator"
    updateActiveAdministrator(input: UpdateActiveAdministratorInput!): Administrator!
    "Delete an Administrator"
    deleteAdministrator(id: ID!): DeletionResponse!
    "Assign a Role to an Administrator"
    assignRoleToAdministrator(administratorId: ID!, roleId: ID!): Administrator!
    "Enabled/Disabled Administrator"
    enabledAdministrator(id: ID!, enabled: Boolean): Success!
    "Update Administrator Password"
    updateAdministratorPassword(currentPassword: String!, newPassword: String!): UpdateAdministratorPasswordResult!
}


# generated by generateListOptions function
input AdministratorListOptions


input CreateAdministratorInput {
    "管理员姓名"
    name: String!
    "管理员登录账号"
    emailAddress: String!
    "管理员密码"
    password: String!
    "角色"
    roleIds: [ID!]!
#    "所属域"
#    domain: DomainEnum!
}
input UpdateAdministratorInput {
    id: ID!
    name: String
    emailAddress: String
    password: String
    roleIds: [ID!]
#    domain: DomainEnum
}

input UpdateActiveAdministratorInput {
    name: String
    emailAddress: String
    password: String
}
